---
image: d.i-run.fr/irun-compiler:jdk8-20200930.a479ebca

variables:
  # CHAT_WEBHOOK_URL: Must exists in group variables or project variables
  # GIT_SUBMODULE_STRATEGY: normal
  # As of Maven 3.3.0 instead of this you may define these options in `.mvn/maven.config` so the same config is used
  # when running from the command line.
  # `installAtEnd` and `deployAtEnd` are only effective with recent version of the corresponding plugins.
  MAVEN_CLI_OPTS:
    "--batch-mode -Dmaven.repo.local=${CI_PROJECT_DIR}/.m2/repository
      --errors --fail-at-end --show-version -DinstallAtEnd=true -DdeployAtEnd=true"
  GIT_SSH_COMMAND: "ssh -i ${CI_PROJECT_DIR}/git_ssh_private_key"
  NEXUS_SERVER_URL: "https://nexus.i-run.fr/repository"

cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - ${CI_PROJECT_DIR}/.m2/repository/

stages:
  - build
  - test
  - release
  - deploy
  - notify

workflow:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: never
    - when: always

before_script:
  - cat "${GIT_SSH_PRIVATE_KEY}" > "${CI_PROJECT_DIR}/git_ssh_private_key"
  - chmod 600 "${CI_PROJECT_DIR}/git_ssh_private_key"

shell-check:
  stage: test
  script:
    - shellcheck .gitlab/*.sh
    - shellcheck .gitlab/scripts/*.sh

maven:build:
  stage: build
  script:
    - find "${CI_PROJECT_DIR}/.m2/repository" -type f -name "*SNAPSHOT*" -delete || true
    - .gitlab/install-deps.sh -c $CI_COMMIT_REF_NAME
    - mvn ${MAVEN_CLI_OPTS} clean install -DskipTests
  artifacts:
    when: on_success
    expire_in: 1 hour
    untracked: true

🖍maven:checkstyle:
  stage: test
  dependencies:
    - maven:build
  cache:
    policy: pull
  script:
    - mvn ${MAVEN_CLI_OPTS} install checkstyle:check -DskipTests

📚maven:javadoc:
  stage: test
  dependencies:
    - maven:build
  cache:
    policy: pull
  script:
    - mvn ${MAVEN_CLI_OPTS} javadoc:javadoc

maven:test:
  stage: test
  dependencies:
    - maven:build
  script: mvn ${MAVEN_CLI_OPTS} test -Pintegration
  artifacts:
    reports:
      junit: [
        target/surefire-reports/TEST-*.xml
      ]

🖍yaml:lint:
  stage: test
  image: python:3-slim
  before_script:
    - export PATH="$PATH:~/.local/bin"
    - pip install --user yamllint
  script:
    - yamllint --strict .

maven:release:
  stage: release
  dependencies:
    - maven:build
  script:
    - echo ${GPG_PASSPHRASE} | gpg --batch --import "${GPG_SECRET_KEY}"
    - git checkout -B "$CI_BUILD_REF_NAME"
    - mvn ${MAVEN_CLI_OPTS} -DdryRun=true release:prepare
    - git clean -f
    - |
      mvn ${MAVEN_CLI_OPTS} \
        release:prepare \
          -DtagNameFormat="@{version}" \
          -DupdateDependencies=false \
          -DscmCommentPrefix="[maven-release][skip CI] " \
          -DdevelopmentVersion="$(.gitlab/bumpVersion.sh)" \
        release:perform \
          -Darguments="-DskipTests=true"
    - git clone "git@gitlab.i-run.fr:${CI_PROJECT_PATH}.git"
    - cd "${CI_PROJECT_NAME}"
    - git checkout master
    - git merge --no-ff -m "[maven-release][skip CI] Merge release in master" origin/develop
    - git push origin master
  rules:
    - if: >
        $CI_COMMIT_REF_NAME == "develop"
        || $CI_COMMIT_REF_NAME =~ /^support/
      when: manual
      allow_failure: true

maven:sonar:
  stage: deploy
  dependencies:
    - maven:build
  allow_failure: true
  cache:
    policy: pull
  script:
    - mvn ${MAVEN_CLI_OPTS} test sonar:sonar -Psonar ${SONAR_CONFIG}
  rules:
    - if: '$CI_COMMIT_REF_NAME == "develop"'
      when: always

maven:deploy-snapshot:
  stage: deploy
  dependencies:
    - maven:build
  script: |
    mvn ${MAVEN_CLI_OPTS} deploy \
      -DskipTests \
      -DaltDeploymentRepository="nexus::default::https://nexus.i-run.fr/repository/snapshots/" \
      -DaltSnapshotDeploymentRepository="nexus" \
      -DaltReleaseDeploymentRepository="ossrh"
  rules:
    - if: >
        $CI_COMMIT_REF_NAME == "develop"
      when: always

⚙trigger:unchained:
  stage: notify
  trigger:
    project: nora/rocket/unchained
    branch: develop
  rules:
    - if: '$CI_COMMIT_REF_NAME == "develop"'
      when: on_success

📣mattermost:failure:
  stage: notify
  allow_failure: true
  variables:
    GIT_STRATEGY: none
  script:
    - |
      curl --header "PRIVATE-TOKEN: ${BRIGIT_ACCESS_TOKEN}"\
        -s -o "./parse_pipeline_error.sh"\
        "https://gitlab.i-run.fr/api/v4/projects/${CI_PROJECT_ID}\
        /repository/files/.gitlab%2Fscripts%2Fparse_pipeline_error.sh/raw?ref=${CI_COMMIT_REF_NAME}"
    - chmod +x ./parse_pipeline_error.sh
    - export JOB_ERROR=$(./parse_pipeline_error.sh
        -p "${CI_PROJECT_ID}" -P "${CI_PIPELINE_ID}" -t "${BRIGIT_ACCESS_TOKEN}")
    - curl -s -o "./user-mapping.sh" "https://gitlab.i-run.fr/share/snippet/snippets/9/raw"
    - curl -s -o "./feature-fail-v2.sh" "https://gitlab.i-run.fr/share/snippet/snippets/20/raw"
    - source "./user-mapping.sh" && chmod +x ./feature-fail-v2.sh
    - CHANNEL="info-gitlab" ./feature-fail-v2.sh
    - CHANNEL="@${USERS[$GITLAB_USER_LOGIN]:-$GITLAB_USER_LOGIN}" ./feature-fail-v2.sh
  when: on_failure
