image: d.i-run.fr/irun-compiler:20190212.ad9ab9c2

variables:
  #CHAT_WEBHOOK_URL: Must exists in group variables or projet variables
  #GIT_SUBMODULE_STRATEGY: normal
  # As of Maven 3.3.0 instead of this you may define these options in `.mvn/maven.config` so the same config is used
  # when running from the command line.
  # `installAtEnd` and `deployAtEnd` are only effective with recent version of the corresponding plugins.
  MAVEN_CLI_OPTS: "--batch-mode -Dmaven.repo.local=${CI_PROJECT_DIR}/.m2/repository --errors --fail-at-end --show-version -DinstallAtEnd=true -DdeployAtEnd=true"
  NEXUS_SERVER_URL: "https://nexus.i-run.fr/repository"

cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
  - ${CI_PROJECT_DIR}/.m2/repository/

stages:
- build
- test
- release
- deploy
- notify

maven:build:
  stage: build
  before_script:
    - find ${CI_PROJECT_DIR}/.m2/repository -type f -name "*SNAPSHOT*" -delete || true
    - .gitlab/install-deps.sh
  script:
    - mvn ${MAVEN_CLI_OPTS} clean install -DskipTests
  artifacts:
    when: on_success
    expire_in: 1 hour
    untracked: true

maven:checkstyle:
  stage: test
  dependencies:
  - maven:build
  cache:
    policy: pull
  script:
  - mvn ${MAVEN_CLI_OPTS} install checkstyle:check -DskipTests

maven:javadoc:
  stage: test
  dependencies:
    - maven:build
  cache:
    policy: pull
  script:
    - mvn ${MAVEN_CLI_OPTS} javadoc:javadoc
    
maven:test:
  stage: test
  dependencies:
  - maven:build
  script: mvn ${MAVEN_CLI_OPTS} test
  artifacts:
    reports:
      junit: [
        target/surefire-reports/TEST-*.xml
      ]

maven:release:
  stage: release
  dependencies:
  - maven:build
  before_script:
    - echo ${GPG_PASSPHRASE} | gpg2 --batch --import "${GPG_SECRET_KEY}"
    - git checkout -B "$CI_BUILD_REF_NAME"
    - mvn ${MAVEN_CLI_OPTS} -DdryRun=true release:prepare
    - git clean -f
  script: 
    - |
      mvn ${MAVEN_CLI_OPTS} \
        release:prepare \
          -DtagNameFormat="@{version}" \
          -DupdateDependencies=false \
          -DscmCommentPrefix="[maven-release][skip CI] " \
        release:perform \
          -Darguments="-DskipTests=true -Dmaven.javadoc.skip=true -Dgpg.passphrase=${GPG_PASSPHRASE}"
    - git clone "git@gitlab.i-run.fr:${CI_PROJECT_PATH}.git"
    - cd "${CI_PROJECT_NAME}"
    - git checkout master
    - git merge --no-ff -m "[maven-release][skip CI] Merge release in master" origin/develop~1
    - git push origin master
  when: manual
  only:
    - develop

maven:sonar:
  stage: deploy
  dependencies:
    - maven:build
  allow_failure: true
  cache:
    policy: pull
  script:
    - mvn ${MAVEN_CLI_OPTS} test sonar:sonar -Psonar ${SONAR_CONFIG}
  only:
    - develop

maven:deploy-snapshot:
  stage: deploy
  dependencies:
    - maven:build
  script: |
    mvn ${MAVEN_CLI_OPTS} deploy \
      -DskipTests \
      -DaltDeploymentRepository="nexus::default::https://nexus.i-run.fr/repository/snapshots/" \
      -DaltSnapshotDeploymentRepository="nexus" \
      -DaltReleaseDeploymentRepository="ossrh"
  only:
    - develop

javadoc:deploy:
  stage: notify
  allow_failure: true
  cache: {}
  script: 
    - curl --request POST --form "token=$CI_JOB_TOKEN" --form ref=develop "${CI_API_V4_URL}/projects/65/trigger/pipeline"
  only:
    - develop

mattermost:failure:
  stage: notify
  allow_failure: true
  variables:
    GIT_STRATEGY: none
  script:
    - curl -s -o "./user-mapping.sh" "https://gitlab.i-run.fr/share/snippet/snippets/9/raw"
    - curl -s -o "./feature-fail.sh" "https://gitlab.i-run.fr/share/snippet/snippets/8/raw"
    - source "./user-mapping.sh" && chmod +x ./feature-fail.sh
    - CHANNEL="info-gitlab" ./feature-fail.sh
    - CHANNEL="@${USERS[$GITLAB_USER_LOGIN]:-$GITLAB_USER_LOGIN}" ./feature-fail.sh
  when: on_failure